{"version":3,"file":"static/webpack/static/development/pages/index.js.3edce3ea931c7acfc6a2.hot-update.js","sources":["webpack:///./pages/Examples/06-validation.example.js","webpack:///./pages/Examples/06-validation.mdx"],"sourcesContent":["import {FormHelper} from 'react-form-helper'\nimport Button from '@material-ui/core/Button'\nimport {TextField} from 'react-material-app'\n\nexport class RealtimeValidation extends React.Component {\n  state = {}\n\n  render() {\n    return (\n      <FormHelper\n        errorOnTouched={this.props.errorOnTouched}\n        saveButton=\"Save\"\n        buttonComponent={Button}\n        buttonProps={{\n          primary: true,\n        }}\n        inputComponent={TextField}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'flex-start',\n        }}\n        onSave={user => this.setState({user})}\n        value={this.state.user}\n        fields={[\n          {\n            path: ['name'],\n            icon: 'face',\n            label: 'Name',\n            required: true,\n            validations: {\n              [required]: {text: 'Name is required'},\n            },\n          },\n          {\n            path: ['email'],\n            icon: 'email',\n            label: 'Email',\n            required: true,\n            validations: {\n              [required]: {text: 'Email is required'},\n              format: {\n                text: 'Must be valid',\n                // test takes a function to validate the field.\n                // The provided pattern function takes a Regexp and\n                // returns a test function.\n                test: pattern(/^[^@]{1,60}@\\w{1,50}\\.\\w{2,15}$/),\n              },\n            },\n          },\n          {\n            path: ['phone'],\n            icon: 'phone',\n            label: 'Phone',\n            validations: {\n              format: {\n                text: 'Must be valid',\n                test: pattern(/^[0-9]{5,10}$/),\n              },\n            },\n          },\n        ]}\n      />\n    )\n  }\n}\n\nexport class ServerValidation extends React.Component {\n  state = {}\n\n  render() {\n    return (\n      <FormHelper\n        saveButton=\"Save\"\n        buttonComponent={Button}\n        buttonProps={{\n          primary: true,\n        }}\n        inputComponent={TextField}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'flex-start',\n        }}\n        onSave={user => this.setState({user})}\n        value={{email: 'admin@example.com'}}\n        fields={[\n          {\n            path: ['email'],\n            icon: 'email',\n            label: 'Email',\n            validationError: 'unique',\n            validations: {\n              unique: {text: 'The email is already registered'},\n            },\n          },\n        ]}\n      />\n    )\n  }\n}\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import {RealtimeValidation, ServerValidation} from './06-validation.example'\nimport {spyState} from '../../src/SpyState'\nexport const attributes = {title: 'Validation'}\nexport const [Example, Spy] = spyState(RealtimeValidation)\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h4\" components={components}>{`Validation`}</MDXTag>\n<MDXTag name=\"h6\" components={components}>{`Code`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"metaString\":\"\"}}>{`<FormHelper\n  saveButton=\"Save\"\n  buttonComponent={Button}\n  buttonProps={{\n    primary: true,\n  }}\n  inputComponent={TextField}\n  style={{display: 'flex', flexDirection: 'column', alignItems: 'flex-start'}}\n  onSave={user => this.setState({user})}\n  value={this.state.user}\n  fields={[\n    {\n      path: ['name'],\n      icon: 'face',\n      label: 'Name',\n      required: true,\n      validations: {\n        [required]: {text: 'Name is required'},\n      },\n    },\n    {\n      path: ['email'],\n      icon: 'email',\n      label: 'Email',\n      required: true,\n      validations: {\n        [required]: {text: 'Email is required'},\n        format: {\n          text: 'Must be valid',\n          // test takes a function to validate the field.\n          // The provided pattern function takes a Regexp and\n          // returns a test function.\n          test: pattern(/^[^@]{1,60}@\\w{1,50}\\.\\w{2,15}\\$/),\n        },\n      },\n    },\n    {\n      path: ['phone'],\n      icon: 'phone',\n      label: 'Phone',\n      validations: {\n        format: {\n          text: 'Must be valid',\n          test: pattern(/^[0-9]{5,10}\\$/),\n        },\n      },\n    },\n  ]}\n/>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h6\" components={components}>{`Demo`}</MDXTag>\n<div>\n  <RealtimeExample />\n</div>\n<MDXTag name=\"h6\" components={components}>{`State`}</MDXTag>\n<div>\n  <p>\n    <RealtimeSpy />\n  </p>\n</div>\n<MDXTag name=\"h4\" components={components}>{`Avoiding a lot of errors at once`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you have a form with multiple required fields you probably\ndon't want to display a required error for all of them when\nthe user opens the form. To avoid that you can set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`errorOnTouched`}</MDXTag>{`\n{' '} to only show the error after the user have interacted with the field.`}</MDXTag>\n<MDXTag name=\"h6\" components={components}>{`Code`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"metaString\":\"\"}}>{`<FormHelper\n  errorOnTouched\n  // ...\n/>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h6\" components={components}>{`Demo`}</MDXTag>\n<div>\n  <RealtimeExampleOnTouched errorOnTouched />\n</div>\n<MDXTag name=\"h4\" components={components}>{`Server Side Validation`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Some things can not be validated on the client alone. By setting\nthe `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`validationError`}</MDXTag>{` property on a field it will display that error\neven if the validation function is missing or returns true.`}</MDXTag>\n<MDXTag name=\"h6\" components={components}>{`Code`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"metaString\":\"\"}}>{`<FormHelper\n  saveButton=\"Save\"\n  buttonComponent={Button}\n  buttonProps={{\n    primary: true,\n  }}\n  inputComponent={TextField}\n  style={{display: 'flex', flexDirection: 'column', alignItems: 'flex-start'}}\n  onSave={user => this.setState({user})}\n  value={{email: 'admin@example.com'}}\n  fields={[\n    {\n      path: ['email'],\n      icon: 'email',\n      label: 'Email',\n      validationError: 'unique',\n      validations: {\n        unique: {text: 'The email is already registered'},\n      },\n    },\n  ]}\n/>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h6\" components={components}>{`Demo`}</MDXTag>\n<div>\n  <ServerExample />\n</div>\n<MDXTag name=\"h6\" components={components}>{`State`}</MDXTag>\n<div>\n  <p>\n    <ServerSpy />\n  </p>\n</div></MDXTag>\n  "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAPA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAJA;AAzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuDA;AA5DA;AACA;AADA;AAAA;AA+DA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AALA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAhCA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjHA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}