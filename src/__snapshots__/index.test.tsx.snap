// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormHelper dirty check should disable the save button if form has not changed 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <input
      disabled={true}
      onChange={[Function]}
      value="a"
    />
  </div>
  <div>
    <input
      disabled={false}
      onChange={[Function]}
      value=""
    />
  </div>
  <button
    disabled={true}
    type="submit"
    value={
      Object {
        "a": "a",
      }
    }
  >
    save
  </button>
</form>
`;

exports[`FormHelper dirty check should enable the save button when the form has changed 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <input
      disabled={false}
      onChange={[Function]}
      value="c"
    />
  </div>
  <div>
    <input
      disabled={false}
      onChange={[Function]}
      value=""
    />
  </div>
  <button
    disabled={false}
    type="submit"
    value={
      Object {
        "a": "c",
      }
    }
  >
    save
  </button>
</form>
`;

exports[`FormHelper should not pass errors to the browser inputs 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <input
      onChange={[Function]}
      value=""
    />
  </div>
  <div>
    <input
      onChange={[Function]}
      value=""
    />
  </div>
  <div>
    <input
      onChange={[Function]}
      value=""
    />
  </div>
</form>
`;

exports[`FormHelper should not run custom validators on no value 1`] = `
<form
  onSubmit={[Function]}
>
  <input
    onChange={[Function]}
  />
</form>
`;

exports[`FormHelper should pass additional props down to the field components 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <input
      a="A"
      b="B"
      onChange={[Function]}
      value=""
    />
  </div>
</form>
`;

exports[`FormHelper should pass disabled to the fields 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <input
      disabled={true}
      onChange={[Function]}
      value="a"
    />
  </div>
  <div>
    <input
      onChange={[Function]}
      value=""
    />
  </div>
</form>
`;

exports[`FormHelper should pass disabled to the fields 2`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <input
      disabled={true}
      onChange={[Function]}
      value="a"
    />
  </div>
  <div>
    <input
      disabled={false}
      onChange={[Function]}
      value=""
    />
  </div>
</form>
`;

exports[`FormHelper should pass errors to custom inputs 1`] = `
<form
  onSubmit={[Function]}
>
  <input
    error="a error"
    onChange={[Function]}
  />
  <input
    error="b error"
    onChange={[Function]}
  />
  <input
    error="c error"
    onChange={[Function]}
    value="value"
  />
</form>
`;

exports[`FormHelper should pass errors to untouched inputs if errorOnTouched is true 1`] = `
<form
  onSubmit={[Function]}
>
  <input
    onBlur={[Function]}
    onChange={[Function]}
  />
  <input
    onBlur={[Function]}
    onChange={[Function]}
  />
  <input
    onBlur={[Function]}
    onChange={[Function]}
    value="value"
  />
</form>
`;

exports[`FormHelper should pass errors to untouched inputs if they are listed in the errorOnTouched array 1`] = `
<form
  onSubmit={[Function]}
>
  <input
    error="a error"
    onChange={[Function]}
  />
  <input
    onBlur={[Function]}
    onChange={[Function]}
  />
  <input
    error="c error"
    onChange={[Function]}
    value="value"
  />
</form>
`;

exports[`FormHelper should render the passed fields 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <input
      onChange={[Function]}
      value="a"
    />
  </div>
  <div>
    <input
      onChange={[Function]}
      value=""
    />
  </div>
</form>
`;

exports[`FormHelper should render using specified components 1`] = `
<form
  onSubmit={[Function]}
>
  <textarea
    onChange={[Function]}
    value="a"
  />
  <textarea
    onChange={[Function]}
  />
  <other-input
    onChange={[Function]}
    value="c"
  />
  <other-input
    onChange={[Function]}
  />
</form>
`;

exports[`FormHelper should support mapping rendered fields 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <textarea
      onChange={[Function]}
      value="a"
    />
  </div>
  <div>
    <textarea
      onChange={[Function]}
    />
  </div>
  <div>
    <other-input
      onChange={[Function]}
      value="c"
    />
  </div>
  <div>
    <other-input
      onChange={[Function]}
    />
  </div>
</form>
`;

exports[`FormHelper should support rendering fields based on value 1`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <input
      onChange={[Function]}
      value="a"
    />
  </div>
  <div>
    <input
      onChange={[Function]}
      value=""
    />
  </div>
</form>
`;

exports[`FormHelper should support rendering fields based on value 2`] = `
<form
  onSubmit={[Function]}
>
  <div>
    <input
      onChange={[Function]}
      value="a"
    />
  </div>
  <div>
    <input
      onChange={[Function]}
      value="b"
    />
  </div>
  <div>
    <input
      onChange={[Function]}
      value=""
    />
  </div>
</form>
`;

exports[`FormHelper typing helpers should pass through values 1`] = `
Array [
  Object {
    "component": [Function],
    "label": "Name",
    "onChange": [Function],
    "path": Array [
      "name",
    ],
    "props": Object {
      "name": "name",
    },
  },
]
`;
